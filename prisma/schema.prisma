// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Faculty {
  id           Int      @id @default(autoincrement()) @db.UnsignedInt
  facultyName  String   @db.VarChar(30)
  major   Major[]
}

model Major {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  facultyId  Int      @db.UnsignedInt
  faculty    Faculty  @relation(fields: [facultyId], references: [id])
  majorName  String   @db.VarChar(50)
  user       User[]
  Subject    Subjects[]
}

model Position {
  id          Int     @id @default(autoincrement()) @db.UnsignedInt
  name        String  @db.VarChar(50)
  audit       Boolean @default(false)
  employee    Boolean @default(false)
  approveResearch     Boolean    @default(false)
  approveActivity     Boolean    @default(false)
  overview    Boolean @default(false)
  user        User[]
}

model User {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  positionId Int      @db.UnsignedInt
  position   Position @relation(fields: [positionId], references: [id])
  majorId    Int      @db.UnsignedInt
  major      Major    @relation(fields: [majorId], references: [id])
  prefix     String   @db.VarChar(10)
  userImage String?  @db.LongText
  username   String   @db.VarChar(40)
  lastname   String   @db.VarChar(40)
  email      String   @db.VarChar(50) @unique
  password   String   @db.VarChar(128)
  role             Role
  teaching         Teaching[]
  activity         Activity[]
  research         Research[]
}

model Teaching {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  starttime  String    @db.VarChar(10)
  endtime    String    @db.VarChar(10)
  day        Day
  group      String    @db.VarChar(3)
  term       Int       @db.UnsignedInt
  year       Int       @db.UnsignedInt
  audit      Audit
  subjectsId Int       @db.UnsignedInt
  subjects   Subjects  @relation(fields: [subjectsId], references: [id])
  userId     Int       @db.UnsignedInt
  user       User      @relation(fields: [userId], references: [id])
}

model Subjects {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  nameTH     String    @db.VarChar(60)
  nameEN     String    @db.VarChar(60)
  code       String    @db.VarChar(8)
  teaching   Teaching[]
  majorId    Int       @db.UnsignedInt
  major      Major     @relation(fields: [majorId], references: [id])
}

model ActivityHeader {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  type      Type
  name      String    @db.VarChar(70)
  file      String?   @db.LongText
  start     DateTime  
  end       DateTime  
  year      Int       @db.UnsignedInt
  activity      Activity[]
}

model Activity {
  id           Int      @id @default(autoincrement()) @db.UnsignedInt
  activityRole ActivityRole
  activityId   Int      @db.UnsignedInt
  activity     ActivityHeader   @relation(fields: [activityId], references: [id])
  userId       Int      @db.UnsignedInt
  user         User     @relation(fields: [userId], references: [id])
  file         String?  @db.LongText
  audit        Audit
  approve      Approve
  createdAt    DateTime @default(now()) 
  updatedAt    DateTime @updatedAt
}

model Research {
  id           Int          @id @default(autoincrement()) @db.UnsignedInt
  userId       Int          @db.UnsignedInt
  user         User         @relation(fields: [userId], references: [id])
  nameTH       String       @db.VarChar(50)
  nameEN       String       @db.VarChar(50)
  researchFund String       @db.VarChar(20)
  type         ResearchType
  year         Int          @db.UnsignedInt
  file         String?      @db.LongText
  audit        Audit
  approve      Approve
  createdAt    DateTime     @default(now()) 
  updatedAt    DateTime     @updatedAt
}
enum ResearchType {
  journalism
  researchreports
  posterpresent
}

enum ActivityRole {
  operator
  joiner 
}

enum Approve {
  wait
  pass
  fail
}
enum Audit {
  wait
  pass
  fail
}
enum Role {
  admin
  user
}
enum Type {
  culture
  service
  other
}
enum Day {
  mon
  tue
  wed
  thu
  fri
  sat
  sun
}