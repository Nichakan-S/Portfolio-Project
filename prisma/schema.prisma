// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       Int    @id @default(autoincrement()) @db.UnsignedInt
  email    String @db.VarChar(100) @unique
  password String @db.VarChar(255)
}

model Faculty {
  id           Int      @id @default(autoincrement()) @db.UnsignedInt
  facultyName  String   @db.VarChar(100)
  user    User[]
  major   Major[]
}

model Major {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  facultyId  Int      @db.Int
  faculty    Faculty  @relation(fields: [facultyId], references: [id])
  majorName  String   @db.VarChar(255)
  user       User[]
}

model Rank {
  id      Int     @id @default(autoincrement())
  rankname    String @db.VarChar(50)
  employee    Boolean @default(false)
  evaluation  Boolean @default(false)
  overview    Boolean @default(false)
  user    User[]
}

model User {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  rankId     Int      @db.Int
  rank       Rank     @relation(fields: [rankId], references: [id])
  facultyId  Int      @db.Int
  faculty    Faculty  @relation(fields: [facultyId], references: [id])
  majorId    Int      @db.Int
  major      Major    @relation(fields: [majorId], references: [id])
  prefix     String   @db.VarChar(15)
  user_image String   @db.Text
  username   String   @db.VarChar(100)
  lastname   String   @db.VarChar(100)
  email      String   @db.VarChar(100) @unique
  password   String   @db.VarChar(255)
  teaching   Teaching[]
  manageactivity ManageActivity[]
  manageResearch ManageResearch[]
}

model Teaching {
  id        Int       @id @default(autoincrement())
  subjectsId Int       
  subjects   Subjects  @relation(fields: [subjectsId], references: [id])
  userId     Int       @db.Int
  user       User      @relation(fields: [userId], references: [id])
}

model Subjects {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(20)
  Day        DayOfWeek 
  Group      String    @db.VarChar(6)
  Starttime  String    @db.VarChar(10)
  Endtime    String    @db.VarChar(10)
  term       String    @db.VarChar(3)
  year       String    @db.VarChar(6)
  teaching   Teaching[]
}

model Activity {
  id        Int       @id @default(autoincrement())
  type      Type      
  name      String    @db.VarChar(70) 
  start     DateTime  
  end       DateTime  
  year      String    @db.VarChar(10)
  manageactivity  ManageActivity[]
}

model ManageActivity {
  id           Int      @id @default(autoincrement()) @db.UnsignedInt
  activityId   Int      @db.Int
  activity     Activity @relation(fields: [activityId], references: [id])
  userId       Int      @db.Int
  user         User     @relation(fields: [userId], references: [id])
  file         String   @db.Text
  status       Status
  createdAt    DateTime @default(now()) 
  updatedAt    DateTime @updatedAt
}

model ManageResearch {
  id           Int          @id @default(autoincrement()) @db.UnsignedInt
  userId       Int          @db.Int
  user         User         @relation(fields: [userId], references: [id])
  nameTH       String       @db.VarChar(50)
  nameEN       String       @db.VarChar(50)
  Researchfund String       @db.VarChar(20)
  type         ResearchType
  year         String       @db.VarChar(20)
  file         String       @db.Text
  status       Status
  createdAt    DateTime     @default(now()) 
  updatedAt    DateTime     @updatedAt
}
enum ResearchType {
  journalism
  researchreports
  posterpresent
}
enum Type {
  culture
  service
}
enum Status {
  wait
  pass
  fail
}
enum DayOfWeek {
  Mon
  Tue
  Wed
  Thu
  Fri
  Sat
  Sun
}